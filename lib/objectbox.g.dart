// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'models/objectBoxModel/account.dart';
import 'models/event.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1712885548659213481),
      name: 'Account',
      lastPropertyId: const IdUid(9, 5944211553272414947),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5996641448177981287),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4715176537879985151),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7991796932316584492),
            name: 'email',
            type: 9,
            flags: 34848,
            indexId: const IdUid(1, 9000978840175663253)),
        ModelProperty(
            id: const IdUid(4, 5221348918566422859),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8676105781591898063),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7401069183167295865),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4277992262783764311),
            name: 'avatarUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5944211553272414947),
            name: 'firebaseUuid',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 4286727007805480962),
      name: 'Event',
      lastPropertyId: const IdUid(9, 7292600360333371458),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2732258002863280504),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5475737996574946140),
            name: 'activityName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 147663942465862169),
            name: 'location',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1469399236199722966),
            name: 'nameOfReporter',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2059717041332119832),
            name: 'timeOfAttending',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8893305035485617619),
            name: 'dateHeld',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7292600360333371458),
            name: 'firebaseUuid',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 4286727007805480962),
      lastIndexId: const IdUid(1, 9000978840175663253),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        2021490705418139639,
        9216695209692139162,
        3960270686729404293
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Account: EntityDefinition<Account>(
        model: _entities[0],
        toOneRelations: (Account object) => [],
        toManyRelations: (Account object) => {},
        getId: (Account object) => object.id,
        setId: (Account object, int id) {
          object.id = id;
        },
        objectToFB: (Account object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final passwordOffset = fbb.writeString(object.password);
          final phoneOffset = fbb.writeString(object.phone);
          final addressOffset = fbb.writeString(object.address);
          final avatarUrlOffset = fbb.writeString(object.avatarUrl);
          final firebaseUuidOffset = fbb.writeString(object.firebaseUuid);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.addOffset(4, phoneOffset);
          fbb.addOffset(5, addressOffset);
          fbb.addOffset(6, avatarUrlOffset);
          fbb.addOffset(8, firebaseUuidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Account(
              firebaseUuid: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              phone: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              address: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              avatarUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Event: EntityDefinition<Event>(
        model: _entities[1],
        toOneRelations: (Event object) => [],
        toManyRelations: (Event object) => {},
        getId: (Event object) => object.id,
        setId: (Event object, int id) {
          object.id = id;
        },
        objectToFB: (Event object, fb.Builder fbb) {
          final activityNameOffset = fbb.writeString(object.activityName);
          final locationOffset = object.location == null
              ? null
              : fbb.writeString(object.location!);
          final nameOfReporterOffset = fbb.writeString(object.nameOfReporter);
          final timeOfAttendingOffset = object.timeOfAttending == null
              ? null
              : fbb.writeString(object.timeOfAttending!);
          final dateHeldOffset = fbb.writeString(object.dateHeld);
          final firebaseUuidOffset = fbb.writeString(object.firebaseUuid);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, activityNameOffset);
          fbb.addOffset(2, locationOffset);
          fbb.addOffset(4, nameOfReporterOffset);
          fbb.addOffset(5, timeOfAttendingOffset);
          fbb.addOffset(6, dateHeldOffset);
          fbb.addOffset(8, firebaseUuidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Event(
              firebaseUuid: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              activityName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              location: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              dateHeld: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              timeOfAttending: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              nameOfReporter: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Account] entity fields to define ObjectBox queries.
class Account_ {
  /// see [Account.id]
  static final id = QueryIntegerProperty<Account>(_entities[0].properties[0]);

  /// see [Account.name]
  static final name = QueryStringProperty<Account>(_entities[0].properties[1]);

  /// see [Account.email]
  static final email = QueryStringProperty<Account>(_entities[0].properties[2]);

  /// see [Account.password]
  static final password =
      QueryStringProperty<Account>(_entities[0].properties[3]);

  /// see [Account.phone]
  static final phone = QueryStringProperty<Account>(_entities[0].properties[4]);

  /// see [Account.address]
  static final address =
      QueryStringProperty<Account>(_entities[0].properties[5]);

  /// see [Account.avatarUrl]
  static final avatarUrl =
      QueryStringProperty<Account>(_entities[0].properties[6]);

  /// see [Account.firebaseUuid]
  static final firebaseUuid =
      QueryStringProperty<Account>(_entities[0].properties[7]);
}

/// [Event] entity fields to define ObjectBox queries.
class Event_ {
  /// see [Event.id]
  static final id = QueryIntegerProperty<Event>(_entities[1].properties[0]);

  /// see [Event.activityName]
  static final activityName =
      QueryStringProperty<Event>(_entities[1].properties[1]);

  /// see [Event.location]
  static final location =
      QueryStringProperty<Event>(_entities[1].properties[2]);

  /// see [Event.nameOfReporter]
  static final nameOfReporter =
      QueryStringProperty<Event>(_entities[1].properties[3]);

  /// see [Event.timeOfAttending]
  static final timeOfAttending =
      QueryStringProperty<Event>(_entities[1].properties[4]);

  /// see [Event.dateHeld]
  static final dateHeld =
      QueryStringProperty<Event>(_entities[1].properties[5]);

  /// see [Event.firebaseUuid]
  static final firebaseUuid =
      QueryStringProperty<Event>(_entities[1].properties[6]);
}
