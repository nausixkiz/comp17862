// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'models/objectBoxModel/account_object_box_model.dart';
import 'models/objectBoxModel/event_object_box_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 894584066545555716),
      name: 'AccountObjectBoxModel',
      lastPropertyId: const IdUid(8, 2399310828962242081),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6597798685354896383),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6582088899059863461),
            name: 'firebaseUuid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1663060796973832565),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2695866292888030058),
            name: 'email',
            type: 9,
            flags: 34848,
            indexId: const IdUid(1, 252866033431091166)),
        ModelProperty(
            id: const IdUid(5, 8555954328618909407),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4716070175848106164),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2984473658201382102),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2399310828962242081),
            name: 'avatarUrl',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 5284398797134205399),
      name: 'EventObjectBoxModel',
      lastPropertyId: const IdUid(7, 353454845742527714),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1936299571483457156),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3216595188538739249),
            name: 'firebaseUuid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4946678063010437102),
            name: 'activityName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3238622959118337526),
            name: 'location',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2060668512536966492),
            name: 'dateHeld',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 482198134027640257),
            name: 'timeOfAttending',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 353454845742527714),
            name: 'nameOfReporter',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 5284398797134205399),
      lastIndexId: const IdUid(1, 252866033431091166),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AccountObjectBoxModel: EntityDefinition<AccountObjectBoxModel>(
        model: _entities[0],
        toOneRelations: (AccountObjectBoxModel object) => [],
        toManyRelations: (AccountObjectBoxModel object) => {},
        getId: (AccountObjectBoxModel object) => object.id,
        setId: (AccountObjectBoxModel object, int id) {
          object.id = id;
        },
        objectToFB: (AccountObjectBoxModel object, fb.Builder fbb) {
          final firebaseUuidOffset = fbb.writeString(object.firebaseUuid);
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final passwordOffset = fbb.writeString(object.password);
          final phoneOffset = fbb.writeString(object.phone);
          final addressOffset = fbb.writeString(object.address);
          final avatarUrlOffset = fbb.writeString(object.avatarUrl);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, firebaseUuidOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addOffset(4, passwordOffset);
          fbb.addOffset(5, phoneOffset);
          fbb.addOffset(6, addressOffset);
          fbb.addOffset(7, avatarUrlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AccountObjectBoxModel(
              firebaseUuid: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              phone: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              address: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              avatarUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    EventObjectBoxModel: EntityDefinition<EventObjectBoxModel>(
        model: _entities[1],
        toOneRelations: (EventObjectBoxModel object) => [],
        toManyRelations: (EventObjectBoxModel object) => {},
        getId: (EventObjectBoxModel object) => object.id,
        setId: (EventObjectBoxModel object, int id) {
          object.id = id;
        },
        objectToFB: (EventObjectBoxModel object, fb.Builder fbb) {
          final firebaseUuidOffset = fbb.writeString(object.firebaseUuid);
          final activityNameOffset = fbb.writeString(object.activityName);
          final locationOffset = object.location == null
              ? null
              : fbb.writeString(object.location!);
          final dateHeldOffset = fbb.writeString(object.dateHeld);
          final timeOfAttendingOffset = object.timeOfAttending == null
              ? null
              : fbb.writeString(object.timeOfAttending!);
          final nameOfReporterOffset = fbb.writeString(object.nameOfReporter);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, firebaseUuidOffset);
          fbb.addOffset(2, activityNameOffset);
          fbb.addOffset(3, locationOffset);
          fbb.addOffset(4, dateHeldOffset);
          fbb.addOffset(5, timeOfAttendingOffset);
          fbb.addOffset(6, nameOfReporterOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = EventObjectBoxModel(
              firebaseUuid: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              activityName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              location: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              dateHeld: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              timeOfAttending: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              nameOfReporter: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AccountObjectBoxModel] entity fields to define ObjectBox queries.
class AccountObjectBoxModel_ {
  /// see [AccountObjectBoxModel.id]
  static final id =
      QueryIntegerProperty<AccountObjectBoxModel>(_entities[0].properties[0]);

  /// see [AccountObjectBoxModel.firebaseUuid]
  static final firebaseUuid =
      QueryStringProperty<AccountObjectBoxModel>(_entities[0].properties[1]);

  /// see [AccountObjectBoxModel.name]
  static final name =
      QueryStringProperty<AccountObjectBoxModel>(_entities[0].properties[2]);

  /// see [AccountObjectBoxModel.email]
  static final email =
      QueryStringProperty<AccountObjectBoxModel>(_entities[0].properties[3]);

  /// see [AccountObjectBoxModel.password]
  static final password =
      QueryStringProperty<AccountObjectBoxModel>(_entities[0].properties[4]);

  /// see [AccountObjectBoxModel.phone]
  static final phone =
      QueryStringProperty<AccountObjectBoxModel>(_entities[0].properties[5]);

  /// see [AccountObjectBoxModel.address]
  static final address =
      QueryStringProperty<AccountObjectBoxModel>(_entities[0].properties[6]);

  /// see [AccountObjectBoxModel.avatarUrl]
  static final avatarUrl =
      QueryStringProperty<AccountObjectBoxModel>(_entities[0].properties[7]);
}

/// [EventObjectBoxModel] entity fields to define ObjectBox queries.
class EventObjectBoxModel_ {
  /// see [EventObjectBoxModel.id]
  static final id =
      QueryIntegerProperty<EventObjectBoxModel>(_entities[1].properties[0]);

  /// see [EventObjectBoxModel.firebaseUuid]
  static final firebaseUuid =
      QueryStringProperty<EventObjectBoxModel>(_entities[1].properties[1]);

  /// see [EventObjectBoxModel.activityName]
  static final activityName =
      QueryStringProperty<EventObjectBoxModel>(_entities[1].properties[2]);

  /// see [EventObjectBoxModel.location]
  static final location =
      QueryStringProperty<EventObjectBoxModel>(_entities[1].properties[3]);

  /// see [EventObjectBoxModel.dateHeld]
  static final dateHeld =
      QueryStringProperty<EventObjectBoxModel>(_entities[1].properties[4]);

  /// see [EventObjectBoxModel.timeOfAttending]
  static final timeOfAttending =
      QueryStringProperty<EventObjectBoxModel>(_entities[1].properties[5]);

  /// see [EventObjectBoxModel.nameOfReporter]
  static final nameOfReporter =
      QueryStringProperty<EventObjectBoxModel>(_entities[1].properties[6]);
}
